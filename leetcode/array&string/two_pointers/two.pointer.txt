Two pointers is an extremely common technique used to solve array and string problems. 
It involves having two integer variables that both move along an iterable. In this article, we are focusing on arrays and strings. 
This means we will have two integers, usually named something like i and j, or left and right which each represent an index of the array or string.

There are several ways to implement two pointers. To start, let's look at the following method:

Start the pointers at the edges of the input. Move them towards each other until they meet.


Converting this idea into instructions:

1. Start one pointer at the first index 0 and the other pointer at the last index input.length - 1.
2. Use a while loop until the pointers are equal to each other.
3. At each iteration of the loop, move the pointers towards each other. 
This means either increment the pointer that started at the first index, decrement the pointer that started at the last index, or both. 
Deciding which pointers to move will depend on the problem we are trying to solve.


psuedo code 

function fn(arr):
    left = 0
    right = arr.length - 1

    while left < right
        Do some logic here depending on the problem
        Do some more logic here to decide on one of the following:
            1. left++
            2. right--
            3. Both left++ and right--

The strength of this technique is that we will never have more than O(n) iterations for the while loop because 
the pointers start n away from each other and move at least one step closer in every iteration. 
Therefore, if we can keep the work inside each iteration at O(1), 
this technique will result in a linear runtime, which is usually the best possible runtime. 


Let's look at some examples.


Example 1: Given a string s, return true if it is a palindrome, false otherwise.

A string is a palindrome if it reads the same forward as backward. That means, after reversing it, it is still the same string.

For example: "abcdcba", or "racecar".


Solution :

After reversing a string, the first character becomes the last character. 
If a string is the same after being reversed, that means the first character is the same as the last character, 
the second character is the same as the second last character, and so on. 
We can use the two pointers technique here to check that all corresponding characters are equal. 
To start, we check the first and last characters using two separate pointers. To check the next pair of characters, we just need to move our pointers toward each other one position. 
We continue until the pointers meet each other or we find a mismatch.


/**
 * @param {string} s
 * @return {boolean}
 */
var checkIfPalindrome = function(s) {
    let left = 0;
    let right = s.length - 1;
    
    while (left < right) {
        if (s[left] != s[right]) {
            return false;
        }
        
        left++;
        right--;
    }
    
    return true;
}

Notice that if the input was an array of characters instead of a string, the algorithm wouldn't change. 
The two pointers technique works as long as the index variables are moving along some abstract iterable.


This algorithm is very efficient as not only does it run in O(n), but it also uses only O(1) space. 
No matter how big the input is, we always only use two integer variables. 
The time complexity is O(n) because the while loop iterations cost O(1) each, 

and there can never be more than O(n) iterations of the while loop - the pointers start at a distance of n from each other and move closer by one step each iteration.



Example 2: 

Given a sorted array of unique integers and a target integer, return true if there exists a pair of numbers that sum to target, false otherwise. 
This problem is similar to Two Sum. (In Two Sum, the input is not sorted).

For example, given nums = [1, 2, 4, 6, 8, 9, 14, 15] and target = 13, return true because 4 + 9 = 13



Brute Force Approach

The brute force solution would be to iterate over all pairs of integers. 
Each number in the array can be paired with another number, so this would result in a time complexity of O(n2), 
where n is the length of the array. Because the array is sorted, we can use two pointers to improve to an O(n) time complexity.

Let's use the example input. With two pointers, we start by looking at the first and last number. 
Their sum is 1 + 15 = 16. Because 16 > target, we need to make our current sum smaller. Therefore, we should move the right pointer. 
Now, we have 1 + 14 = 15. Again, move the right pointer because the sum is too large. Now, 1 + 9 = 10. 
Since the sum is too small, we need to make it bigger, which can be done by moving the left pointer.
2 + 9 = 11 < target, so move it again. Finally, 4 + 9 = 13 = target.



/**
 * @param {number[]} nums
 * @param {number} target
 * @return {boolean}
 */
var checkForTarget = function(nums, target) {
    let left = 0;
    let right = nums.length - 1;
    
    while (left < right) {
        // curr is the current sum
        let curr = nums[left] + nums[right];
        if (curr == target) {
            return true;
        }
        
        if (curr > target) {
            right--;
        } else {
            left++;
        }
    }
    
    return false;
}


=============================

Another way to use two pointers

This method where we start the pointers at the first and last indices and move them towards each other is only one way to implement two pointers. 
Algorithms are beautiful because of how abstract they are - "two pointers" is just an idea, and it can be implemented in many different ways. 
Let's look at another method and some new examples. 

The following method is applicable when the problem has two iterables in the input, for example, two arrays.

Move along both inputs simultaneously until all elements have been checked.


Converting this idea into instructions:

1. Create two pointers, one for each iterable. Each pointer should start at the first index.
2. Use a while loop until one of the pointers reaches the end of its iterable.
3. At each iteration of the loop, move the pointers forward. This means incrementing either one of the pointers or both of the pointers. Deciding which pointers to move will depend on the problem we are trying to solve.
4. Because our while loop will stop when one of the pointers reaches the end, the other pointer will not be at the end of its respective iterable when the loop finishes. Sometimes, we need to iterate through all elements 
    - if this is the case, you will need to write extra code here to make sure both iterables are exhausted.


Here's some pseudocode illustrating the concept:

function fn(arr1, arr2):
    i = j = 0
    while i < arr1.length AND j < arr2.length:
        Do some logic here depending on the problem
        Do some more logic here to decide on one of the following:
            1. i++
            2. j++
            3. Both i++ and j++

    // Step 4: make sure both iterables are exhausted
    // Note that only one of these loops would run
    while i < arr1.length:
        Do some logic here depending on the problem
        i++

    while j < arr2.length:
        Do some logic here depending on the problem
        j++

Similar to the first method we looked at, this method will have a linear time complexity of O(n+m) if the work inside the while loop is O(1), 
where n = arr1.length and m = arr2.length. This is because at every iteration, we move at least one pointer forward, and the pointers cannot be moved forward more than n + m times without the arrays being exhausted. 



Let's look at some examples.


Example 3: 

Given two sorted integer arrays arr1 and arr2, return a new array that combines both of them and is also sorted.

The trivial approach would be to first combine both input arrays and then perform a sort. 
If we have n = arr1.length + arr2.length, then this gives a time complexity of O(n⋅logn) (the cost of sorting). 
This would be a good approach if the input arrays were not sorted, but because they are sorted, we can take advantage of the two pointers technique to improve to O(n).


In the previous example, we declared n = arr1.length and m = arr2.length. 
Here, we are saying n = arr1.length + arr2.length. Why have we changed the definition? 
Remember that when it comes to big O, we are allowed to define the variables as we see fit.
We could certainly stick to using n, m. In that case, the time complexity of the sorting approach would be O((n+m)⋅log⁡(m+n)) and the time complexity of the approach we are about to cover would be O(n+m). 
It makes no difference either way, but one justification we could give here is that since we are combining the arrays, the total length is a significant number, so it makes sense to represent it as n.


Keeping the definition as n = arr1.length and m = arr2.length is fine as well.


Detailed Explanation:
Sorting an array of length nn costs O(n⋅log⁡n).
We can improve the time complexity by a factor of log⁡n by taking advantage of the input arrays already being sorted.


If we start with the smallest number from each array, 
then whichever one is smaller must be before the other one - so we add it to the answer and move to the next number in that array. 
If the values are equal, it doesn't matter which one we choose - we can arbitrarily choose either. 
This process can be repeated until one of the arrays runs out of numbers.

When this happens, we are still left with some numbers in the other array. 
These numbers are all larger than the largest number in the exhausted array. 
We should just append them to the answer.



/**
 * @param {number[]} arr1   [1,2,4,5,7,20]
 * @param {number[]} arr2   [2,4,5,6,8,9,10,12,15]
 * @return {number[]}
 *
 */
var combine = function(arr1, arr2) {
    // ans is the answer
    let ans = [];
    let i = 0, j = 0;
    

    // this will add the smallest value into the array,but one array is likely to get exhausted before the other 
    // so we loop through individual array to get the rest element
    while (i < arr1.length && j < arr2.length) {
        if (arr1[i] < arr2[j]) {
            ans.push(arr1[i]);
            i++;
        } else {
            ans.push(arr2[j]);
            j++;
        }
    }
     
    // so we loop through individual array to get the rest element
    while (i < arr1.length) {
        ans.push(arr1[i]);
        i++;
    }
    
    while (j < arr2.length) {
        ans.push(arr2[j]);
        j++;
    }
    
    return ans;
}



Example 4:

Given two strings s and t, return true if s is a subsequence of t, or false otherwise.


A subsequence of a string is a sequence of characters that can be obtained by deleting some (or none) of the characters from the original string, 
while maintaining the relative order of the remaining characters. 

For example, "ace" is a subsequence of "abcde" while "aec" is not.


In this problem, we need to check if the characters of s appear in the same order in t, with gaps allowed. 
For example, "ace" is a subsequence of "abcde" because "abcde" contains the letters "ace" in that same order - 
the fact that they aren't consecutive doesn't matter.

We can use two pointers to solve this in linear time. If we find that s[i] == t[j], that means we "found" the letter at position i for s, 
and we can move on to the next one by incrementing i. We should increment j at each iteration no matter what (which means we could also implement this algorithm using a for loop). 
s is a subsequence of t if we can "find" all the letters of s, which means that i == s.length at the end of the algorithm.


Detailed Explanation :

For every character in s, we need to find a match in t. Let's say we have s = "bc" and t = "abcd". 
Using the two pointers technique, we start by looking at the first character in both strings.

We need to try and match the first character of s, which is "b". The first character of t is "a", 
which is not a match. As such, we will move to the next character in t. We don't move forward in s just yet, 
because we still need to match the "b". The next character of t is "b", and we have found a match. 
Now, we can move on to the next character in s, which is the "c". A character in t can only be matched once, so we must also move forward in t. 
Now, we have another match since the next character in t is also "c".

We have managed to match all the characters in s, which means that s is a subsequence of t.
As you can see, in both scenarios (match or mismatch), we move forward in t. 
In the match scenario, it's because we can't use a letter in t multiple times. 
In the mismatch scenario, it's like we're discarding the character since it's not useful. 
We only move forward in s when we find a match, since our task is to match all characters in s.


/**
 * @param {string} s
 * @param {string} t
 * @return {boolean}
 */
var isSubsequence = function(s, t) {
    let i = 0, j = 0;
    while (i < s.length && j < t.length) {
        if (s[i] == t[j]) {
            i++;
        }
        
        j++;
    }
    
    return i == s.length;
};

Just like all the prior examples, this solution uses O(1)O(1) space. The time complexity is linear with the lengths of s and t.

Closing notes

Remember that the methods laid out here are just guidelines. 
For example, in the first method, we started the pointers at the first and last index, 
but sometimes you might find a problem that involves starting the pointers at different indices. 
In the second method, we moved two pointers forward along two different inputs. 
Sometimes, there will only be one input array/string, but we still initialize both pointers at the first index and move both of them forward.


Two pointers just refers to using two integer variables to move along some iterables. 
The strategies we looked at in this article are the most common patterns, 
but always be on the lookout for a different way to approach a problem. 
There are even problems that make use of "three pointers".


NOTE
======================================
The chapters and articles in this course are ordered in a way that ideas learned in earlier chapters can be applied to later chapters. 
Two pointers certainly has a lot more applications than just what is in this article - don't worry, this won't be the last we'll be seeing of it.
======================